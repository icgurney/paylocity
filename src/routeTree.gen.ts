/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as EmployeesImport } from './routes/employees'
import { Route as IndexImport } from './routes/index'
import { Route as EmployeesEmployeeIdImport } from './routes/employees_.$employeeId'
import { Route as EmpoloyeesEmployeeIdDependentIdImport } from './routes/empoloyees_.$employeeId_.$dependentId'
import { Route as EmployeesEmployeeIdEditImport } from './routes/employees_.$employeeId_.edit'

// Create/Update Routes

const EmployeesRoute = EmployeesImport.update({
  id: '/employees',
  path: '/employees',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EmployeesEmployeeIdRoute = EmployeesEmployeeIdImport.update({
  id: '/employees_/$employeeId',
  path: '/employees/$employeeId',
  getParentRoute: () => rootRoute,
} as any)

const EmpoloyeesEmployeeIdDependentIdRoute =
  EmpoloyeesEmployeeIdDependentIdImport.update({
    id: '/empoloyees_/$employeeId_/$dependentId',
    path: '/empoloyees/$employeeId/$dependentId',
    getParentRoute: () => rootRoute,
  } as any)

const EmployeesEmployeeIdEditRoute = EmployeesEmployeeIdEditImport.update({
  id: '/employees_/$employeeId_/edit',
  path: '/employees/$employeeId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/employees': {
      id: '/employees'
      path: '/employees'
      fullPath: '/employees'
      preLoaderRoute: typeof EmployeesImport
      parentRoute: typeof rootRoute
    }
    '/employees_/$employeeId': {
      id: '/employees_/$employeeId'
      path: '/employees/$employeeId'
      fullPath: '/employees/$employeeId'
      preLoaderRoute: typeof EmployeesEmployeeIdImport
      parentRoute: typeof rootRoute
    }
    '/employees_/$employeeId_/edit': {
      id: '/employees_/$employeeId_/edit'
      path: '/employees/$employeeId/edit'
      fullPath: '/employees/$employeeId/edit'
      preLoaderRoute: typeof EmployeesEmployeeIdEditImport
      parentRoute: typeof rootRoute
    }
    '/empoloyees_/$employeeId_/$dependentId': {
      id: '/empoloyees_/$employeeId_/$dependentId'
      path: '/empoloyees/$employeeId/$dependentId'
      fullPath: '/empoloyees/$employeeId/$dependentId'
      preLoaderRoute: typeof EmpoloyeesEmployeeIdDependentIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/employees': typeof EmployeesRoute
  '/employees/$employeeId': typeof EmployeesEmployeeIdRoute
  '/employees/$employeeId/edit': typeof EmployeesEmployeeIdEditRoute
  '/empoloyees/$employeeId/$dependentId': typeof EmpoloyeesEmployeeIdDependentIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/employees': typeof EmployeesRoute
  '/employees/$employeeId': typeof EmployeesEmployeeIdRoute
  '/employees/$employeeId/edit': typeof EmployeesEmployeeIdEditRoute
  '/empoloyees/$employeeId/$dependentId': typeof EmpoloyeesEmployeeIdDependentIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/employees': typeof EmployeesRoute
  '/employees_/$employeeId': typeof EmployeesEmployeeIdRoute
  '/employees_/$employeeId_/edit': typeof EmployeesEmployeeIdEditRoute
  '/empoloyees_/$employeeId_/$dependentId': typeof EmpoloyeesEmployeeIdDependentIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/employees'
    | '/employees/$employeeId'
    | '/employees/$employeeId/edit'
    | '/empoloyees/$employeeId/$dependentId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/employees'
    | '/employees/$employeeId'
    | '/employees/$employeeId/edit'
    | '/empoloyees/$employeeId/$dependentId'
  id:
    | '__root__'
    | '/'
    | '/employees'
    | '/employees_/$employeeId'
    | '/employees_/$employeeId_/edit'
    | '/empoloyees_/$employeeId_/$dependentId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EmployeesRoute: typeof EmployeesRoute
  EmployeesEmployeeIdRoute: typeof EmployeesEmployeeIdRoute
  EmployeesEmployeeIdEditRoute: typeof EmployeesEmployeeIdEditRoute
  EmpoloyeesEmployeeIdDependentIdRoute: typeof EmpoloyeesEmployeeIdDependentIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EmployeesRoute: EmployeesRoute,
  EmployeesEmployeeIdRoute: EmployeesEmployeeIdRoute,
  EmployeesEmployeeIdEditRoute: EmployeesEmployeeIdEditRoute,
  EmpoloyeesEmployeeIdDependentIdRoute: EmpoloyeesEmployeeIdDependentIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/employees",
        "/employees_/$employeeId",
        "/employees_/$employeeId_/edit",
        "/empoloyees_/$employeeId_/$dependentId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/employees": {
      "filePath": "employees.tsx"
    },
    "/employees_/$employeeId": {
      "filePath": "employees_.$employeeId.tsx"
    },
    "/employees_/$employeeId_/edit": {
      "filePath": "employees_.$employeeId_.edit.tsx"
    },
    "/empoloyees_/$employeeId_/$dependentId": {
      "filePath": "empoloyees_.$employeeId_.$dependentId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
